@model CAT.Services.SoldMoment_Service.SoldMomentCreate

@{
    ViewBag.Title = "Create";
}

<!--header information-->
<div class="container text-white p-2 topContainer" style="min-width: 1000px;">
    <div class="row" style="min-height: 8vh;">
        <section class="col align-self-end">
            <h1 class="display-4">
                Record Asset Sale
            </h1>
        </section>
        <div class="w-100"></div>
        <section class="col align-self-center">
            <span style="font-weight: 200; font-size: 18px;">
                To record an Asset sale, please fill out the form below.
            </span>
        </section>
    </div><!--row-->
</div><!--container-->

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="container containerGradient p-3" style="min-width: 1000px;">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="row align-items-center d-flex justify-content-center">
                <div class="col-4">
                    <div class="form-group d-none">
                        @Html.Label("Moment Id", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.MomentId, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MomentId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group d-none">
                        @Html.LabelFor(model => model.PlayerId, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.PlayerId, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PlayerId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group d-none">
                        @Html.LabelFor(model => model.MomentCategory, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.MomentCategory, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MomentCategory, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group d-none">
                        @Html.LabelFor(model => model.DateOfMoment, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.DateOfMoment, new { htmlAttributes = new { @class = "form-control", placeholder = "Ex. \"Jan 8 2019\"" } })
                            @Html.ValidationMessageFor(model => model.DateOfMoment, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group d-none">
                        @Html.LabelFor(model => model.MomentSet, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.MomentSet, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MomentSet, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group d-none">
                        @Html.LabelFor(model => model.MomentSeries, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.MomentSeries, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MomentSeries, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group d-none">
                        @Html.LabelFor(model => model.MomentSerialNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.MomentSerialNumber, new { htmlAttributes = new { @class = "form-control" } }) / @Html.EditorFor(model => model.MomentCirculatingCount, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MomentSerialNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group d-none">
                        @Html.LabelFor(model => model.MomentTier, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EnumDropDownListFor(model => model.MomentTier, "Select", new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MomentTier, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group d-none">
                        @Html.LabelFor(model => model.MomentMint, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EnumDropDownListFor(model => model.MomentMint, "Select", new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MomentMint, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group d-none">
                        @Html.LabelFor(model => model.PurchasedInPack, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.RadioButtonFor(model => model.PurchasedInPack, true) Yes

                            @Html.RadioButtonFor(model => model.PurchasedInPack, false) No
                        </div>
                    </div>

                    <div class="form-group d-none">
                        @Html.LabelFor(model => model.AmountInPack, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.AmountInPack, new { htmlAttributes = new { id = "denom", onkeyup = "quotient()", @class = "form-control", placeholder = "If \"No\", leave blank" } })
                            @Html.ValidationMessageFor(model => model.AmountInPack, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group d-none">
                        @Html.LabelFor(model => model.PackPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.PackPrice, new { htmlAttributes = new { id = "num", onkeyup = "quotient()", @class = "form-control", placeholder = "If \"No\", leave blank" } })
                            @Html.ValidationMessageFor(model => model.PackPrice, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group d-none">
                        @Html.LabelFor(model => model.IndividualMomentPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.IndividualMomentPrice, new { htmlAttributes = new { id = "quotientResult", @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.IndividualMomentPrice, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <!--visible-->
                    <div class="form-group">
                        @Html.Label("Sale Price", htmlAttributes: new { @class = "control-label" })
                        <div>
                            @Html.EditorFor(model => model.SoldForAmount, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.SoldForAmount, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <!--submit-->
                    <div class="form-group pt-2">
                        <button type="submit" class="btn btn-info submit_button" style="font-size: 20px;">
                            <i class="fas fa-coins text-warning" style="font-size: 24px;"></i>
                            Record Asset Sale
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<!--nav button-->
<div class="container p-3" style="min-width: 1000px;">
    <div class="row text-right">
        <div class="col form-group">
            <a class="btn btn-outline-info" style="font-size: 20px;" href="@Url.Content("~/Moment/Index")">
                <i class="fas fa-arrow-left text-warning" style="font-size: 24px;"></i> Back to Assets
            </a>
        </div>
    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        function quotient() {
            var num = document.getElementById('num').value;
            var denom = document.getElementById('denom').value;
            var result = parseFloat(num) / parseFloat(denom);
            if (!isNaN(result)) {
                result = Math.floor(result * 100) / 100;
                document.getElementById('quotientResult').value = result;
            }
        }
    </script>
}
